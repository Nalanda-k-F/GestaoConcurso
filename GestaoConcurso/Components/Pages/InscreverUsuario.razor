@page "/cadastro"
@using GestaoConcurso.Models
@using GestaoConcurso.Controllers
@inject CandidatoController candidatoControl
@inject EstadoController estadoControl
@inject CidadeController cidadeControl
@inject ConcursoController concursoControl
@inject EnderecoController enderecoControl
@inject InscricaoController inscricaoControl
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3 class="text-center" style="color: black; font-weight: bold;">Cadastro de Candidato</h3>

<div class="d-flex justify-content-center">
    <div style="width: 70%;">
        <EditForm Model="@candidato" OnValidSubmit="Salvar" class="p-4 border rounded shadow-lg bg-light">
            <DataAnnotationsValidator />

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="nome">Nome:<span class="text-danger">*</span></label>
                    <InputText id="nome" @bind-Value="candidato.Nome" class="form-control" placeholder="Digite seu nome" />
                    <ValidationMessage For="@(() => candidato.Nome)" />
                </div>

                <div class="col-md-6 mb-3">
                    <label for="cpf">CPF:<span class="text-danger">*</span></label>
                    <InputText id="cpf" @bind-Value="candidato.Cpf" class="form-control" placeholder="Digite seu CPF" />
                    <ValidationMessage For="@(() => candidato.Cpf)" class="text-danger" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="estado">Estado:<span class="text-danger">*</span></label>
                    <select id="estado" class="form-control" @onchange="AtualizarEstadoSelecionado">
                        <option value="">Selecione um Estado</option>
                        @foreach (var item in estados)
                        {
                            <option value="@item.Id">@item.Nome (@item.UF)</option>
                        }
                    </select>
                </div>

                <div class="col-md-6 mb-3">
                    <label for="cidade">Cidade:<span class="text-danger">*</span></label>
                    <select id="cidade" class="form-control" @onchange="AtualizarCidadeSelecionada" disabled="@(cidadesFiltradas.Count == 0)">
                        <option value="">Selecione a Cidade</option>
                        @foreach (var cidadeItem in cidadesFiltradas)
                        {
                            <option value="@cidadeItem.Id">@cidadeItem.Municipio</option>
                        }
                    </select>
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="rua">Rua:</label>
                    <InputText id="rua" @bind-Value="endereco.Rua" class="form-control" placeholder="Digite a rua" />
                    <ValidationMessage For="@(() => endereco.Rua)" class="text-danger" />
                </div>

                <div class="col-md-3 mb-3">
                    <label for="numero">Número:</label>
                    <InputText id="numero" @bind-Value="endereco.Numero" class="form-control" placeholder="Número" />
                    <ValidationMessage For="@(() => endereco.Numero)" />
                </div>
            </div>

            <div class="row">
                <div class="col-md-6 mb-3">
                    <label for="bairro">Bairro:</label>
                    <InputText id="bairro" @bind-Value="endereco.Bairro" class="form-control" placeholder="Bairro" />
                    <ValidationMessage For="@(() => endereco.Bairro)"/>
                </div>
                <div class="col-md-6 mb-3">
                    <label for="complemento">Complemento:</label>
                    <InputText id="complemento" @bind-Value="endereco.Complemento" class="form-control" placeholder="Complemento" />
                    <ValidationMessage For="@(() => endereco.Complemento)"/>
                </div>
            </div>

            <div class="form-group">
                <label>Concurso:</label>
                <select class="form-control" @bind="concursoId">
                    <option value="">Selecione um Edital</option>
                    @if (concursos != null)
                    {
                        @foreach (var concurso in concursos)
                        {
                            <option value="@concurso.Id">@concurso.Edital</option>
                        }
                    }
                </select>
            </div>

            @if (!string.IsNullOrEmpty(mensagemErro))
            {
                <div class="alert alert-danger text-center">@mensagemErro</div>
            }

            @if (!string.IsNullOrEmpty(mensagemSucesso))
            {
                <div class="alert alert-success text-center">@mensagemSucesso</div>
            }

            <div class="d-flex justify-content-center gap-3">
                <button type="submit" class="btn" style="background-color: #3CB371;color: white;">
                    Salvar
                    </button>
                <button type="button" class="btn" style="background-color: #DC143C;color: white" @onclick="CancelarCadastro">
                    Cancelar
                </button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    
    .form-group {
        margin-bottom: 15px;
    }

    .text-danger {
        color: red;
    }
</style>


@code {
    public Candidato candidato = new();
    public Endereco endereco = new();
    public List<Estado> estados = new();
    public List<Cidade> cidadesFiltradas = new();
    private string mensagemErro;
    private string mensagemSucesso;
    public int EstadoSelecionado;
    public int cidadeIdSelecionada;
    private bool carregandoCidades = false;
    private int concursoId;
    private List<Concurso> concursos;
    public Inscricao inscricao = new Inscricao();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            estados = await estadoControl.ListarEstados();
            concursos = await concursoControl.ListarConcurso();
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao carregar dados: {ex.Message}";
            EsconderMensagens();
        }
    }

    public async Task AtualizarEstadoSelecionado(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int estadoId))
        {
            EstadoSelecionado = estadoId;
            cidadesFiltradas = await cidadeControl.ListarTodasCidades(EstadoSelecionado);
            StateHasChanged();
        }
    }

    public void AtualizarCidadeSelecionada(ChangeEventArgs e)
    {
        int.TryParse(e.Value.ToString(), out cidadeIdSelecionada);
    }

    private async Task Salvar()
    {
        mensagemErro = string.Empty;
        mensagemSucesso = string.Empty;
        try
        {
            var resultadoCandidato = await candidatoControl.Add(candidato);
            if (resultadoCandidato != null && resultadoCandidato.Id > 0)
            {
                endereco.CandidatoId = resultadoCandidato.Id;
                endereco.CidadeId = cidadeIdSelecionada;
                await enderecoControl.Add(endereco);
                // Criar a inscrição
                inscricao.CandidatoId = resultadoCandidato.Id;
                inscricao.ConcursoId = concursoId;
                inscricao.DataInscricao = DateTime.Now; // Defina a data de inscrição
                await inscricaoControl.Add(inscricao); // Adicione a inscrição

                mensagemSucesso = "Cadastro e inscrição realizados com sucesso!";
                EsconderMensagens(true);
            }
            else
            {
                mensagemErro = "Erro ao salvar o candidato.";
                EsconderMensagens();
            }
        }
        catch (Exception ex)
        {
            mensagemErro = $"Erro ao salvar: {ex.Message}";
            EsconderMensagens();
        }
    }

    private void CancelarCadastro()
    {
        ResetarFormulario();
        NavigationManager.NavigateTo("/cadastro", true);
    }

    private void ResetarFormulario()
    {
        candidato = new();
        endereco = new();
        cidadeIdSelecionada = 0;
        cidadesFiltradas.Clear();
        EstadoSelecionado = 0;
    }

    private async void EsconderMensagens(bool limparCampos = false)
    {
        await Task.Delay(3000);
        mensagemErro = string.Empty;
        mensagemSucesso = string.Empty;
        if (limparCampos)
        {
            ResetarFormulario();
        }
        StateHasChanged();
    }
}
