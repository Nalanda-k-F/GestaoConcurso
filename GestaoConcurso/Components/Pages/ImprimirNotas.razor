@page "/imprimirNota"
@using System.Data;
@using GestaoConcurso.Models
@using GestaoConcurso.Controllers
@using GestaoConcurso.Utilitarios
@using System.ComponentModel.DataAnnotations;
@inject ConcursoDisciplinaController concursoDisciplinaControl
@inject RelatorioNotas relatorioNotas
@inject InscricaoController inscricaoControl
@inject PontuacaoController pontuacaoControl
@inject ConcursoController concursoControl
@inject NavigationManager NavigationManager
@inject IJSRuntime jsRuntime
@rendermode InteractiveServer

<script>
    function NovaGuia(url) {
        window.open(url, '_blank');
    }
</script>

<div class="container mt-4">
    <h3 class="text-center mb-4" style="color: black; font-weight: bold;">Lista de Aprovados</h3>

    <div class="d-flex justify-content-center">
        <div style="width: 70%;">
            <div class="p-4 border rounded shadow-lg bg-light">
                <div class="mb-3">
                    <label for="concursoId" class="form-label">Concurso:</label>
                    <select id="concursoId" class="form-select" @bind="filtro.ConcursoId">
                        <option value="0">Selecione um Concurso</option>
                        @if (concursos != null)
                        {
                            @foreach (var concurso in concursos)
                            {
                                <option value="@concurso.Id">@concurso.Edital</option>
                            }
                        }
                    </select>
                </div>
                <button class="btn me-2" style="background-color: #3CB371;color: white;" @onclick="MostrarLista">Mostrar Lista</button>
                @if (listaAprovados != null && listaAprovados.Any())
                {
                    <button class="btn mt-2" style="background-color: #DC143C;color: white" @onclick="ImprimirAprovados">Imprimir Aprovados</button>
                }
            </div>
        </div>
    </div>

    @if (exibirLista)
    {
        @if (listaAprovados != null && listaAprovados.Any())
        {
            <table class="table table-striped table-bordered mt-4">
                <thead class="table-primary">
                    <tr>
                        <th scope="col">Candidato</th>
                        <th scope="col">Nota</th>
                        <th scope="col">Aprovado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var candidato in listaAprovados)
                    {
                        <tr>
                            @if (candidato.Inscricao != null && candidato.Inscricao.Candidato != null)
                            {
                                <td>@candidato.Inscricao.Candidato.Nome</td>
                                <td>@candidato.Nota</td>
                                <td>
                                    @if (candidato.Nota >= 60)
                                    {
                                        <span class="text-success">Sim</span>
                                    }
                                    else
                                    {
                                        <span class="text-danger">Não</span>
                                    }
                                </td>
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
        else
        {
            <p class="text-center mt-4">Não há candidatos aprovados para este concurso.</p>
        }
    }
</div>

@code {
    public FiltroRelatorio filtro = new FiltroRelatorio();
    public List<Concurso> concursos;
    public List<(Inscricao Inscricao, decimal Nota)> listaAprovados;
    public bool exibirLista = false;

    protected override async Task OnInitializedAsync()
    {
        concursos = await concursoControl.ListarConcurso();
    }

    private void OnConcursoChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value.ToString(), out int concursoId))
        {
            filtro.ConcursoId = concursoId;
        }
    }

    private async Task MostrarLista()
    {
        await CarregarListaAprovados(filtro.ConcursoId);
        exibirLista = true;
    }

    private async Task CarregarListaAprovados(int concursoId)
    {
        if (concursoId > 0)
        {
            var inscricoes = await inscricaoControl.ListarInscricaoPorConcurso(concursoId);
            listaAprovados = new List<(Inscricao Inscricao, decimal Nota)>();

            foreach (var inscricao in inscricoes)
            {
                var pontuacoes = await pontuacaoControl.ObterPontuacoesPorInscricao(inscricao.Id);
                if (pontuacoes.Any())
                {
                    decimal media = pontuacoes.Average(p => p.Nota ?? 0);
                    listaAprovados.Add((inscricao, media));
                }
            }
        }
        else
        {
            listaAprovados = new List<(Inscricao Inscricao, decimal Nota)>();
        }
    }

    private async Task ImprimirAprovados()
    {
        if (listaAprovados == null || !listaAprovados.Any())
        {
            Console.WriteLine("listaAprovados está nulo ou vazio.");
            return;
        }

        var aprovados = listaAprovados.Where(c => c.Nota >= 60).ToList();
        if (!aprovados.Any())
        {
            Console.WriteLine("Não há candidatos aprovados.");
            return;
        }

        try
        {
            var tabelaAprovados = new DataTable("Aprovados");
            tabelaAprovados.Columns.Add("Inscricao", typeof(Inscricao));
            tabelaAprovados.Columns.Add("Nota", typeof(decimal));

            foreach (var aprovado in aprovados)
            {
                tabelaAprovados.Rows.Add(aprovado.Inscricao, aprovado.Nota);
            }

            var candidato = aprovados.First().Inscricao.Candidato;
            var concursos = await concursoControl.ListarConcurso();
            var candidatoList = new List<Candidato> { candidato };
            await relatorioNotas.GerarNotasAprovados(candidatoList, concursos, tabelaAprovados, NavigationManager, jsRuntime);
            Console.WriteLine("Relatório gerado com sucesso!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erro ao gerar relatório: {ex.Message}");
        }
    }

    public class FiltroRelatorio
    {
        public int ConcursoId { get; set; }
    }
}