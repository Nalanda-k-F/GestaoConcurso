@page "/lancamentoNotas"
@using GestaoConcurso.Models
@using GestaoConcurso.Controllers
@inject PontuacaoController pontuacaoControl
@inject ConcursoDisciplinaController concursoDisciplinaControl
@inject InscricaoController inscricaoControl
@inject ConcursoController concursoControl
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<div class="container mt-4">
    <h3 class="text-center mb-4">Lançamento de Notas dos Candidatos</h3>

    <div class="row justify-content-center">
        <div class="col-md-8">
            <EditForm Model="@notasCandidatos" OnValidSubmit="SalvarNotas" class="p-4 border rounded shadow-lg bg-light">
                <DataAnnotationsValidator />

                @if (!string.IsNullOrEmpty(mensagemErro))
                {
                    <div class="alert alert-danger mb-3">
                        @mensagemErro
                    </div>
                }

                @if (!string.IsNullOrEmpty(mensagemSucesso))
                {
                    <div class="alert alert-success mb-3">
                        @mensagemSucesso
                    </div>
                }

                <div class="card mb-3">
                    <div class="card-body">
                        <div class="mb-3">
                            <label for="concursoSelect" class="form-label">Selecione o Concurso:</label>
                            <select id="concursoSelect" class="form-select" @onchange="OnConcursoSelecionado">
                                <option value="">Selecione...</option>
                                @if (concursos != null)
                                {
                                    @foreach (var concurso in concursos)
                                    {
                                        <option value="@concurso.Id">@concurso.Edital</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                </div>

                @if (candidatos != null)
                {
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Nome do Candidato</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var candidato in candidatos)
                                        {
                                            <tr>
                                                <td>
                                                    <button type="button" class="btn btn-link" style="text-decoration: none; color: red;" @onclick="() => CarregarDisciplinas(candidato.Id)">@candidato.Candidato.Nome</button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                }

                @if (disciplinas != null)
                {
                    @foreach (var disciplina in disciplinas)
                    {
                        Console.WriteLine($"Disciplina: {disciplina.Disciplina?.NomeDisc}");
                    }
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="table-responsive">
                                <table class="table table-striped table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Disciplina</th>
                                            <th>Nota</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var disciplina in disciplinas)
                                        {
                                            <tr>
                                                <td>@(disciplina.Disciplina?.NomeDisc ?? "Disciplina não encontrada")</td>
                                                <td>
                                                    <input type="number" class="form-control" @bind-value="notas[disciplina.Id]" />
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <div class="d-flex justify-content-end">
                        <button type="submit" class="btn me-2" style="background-color: #3CB371;color: white;">Salvar Notas</button>
                        <button type="button" class="btn " style="background-color: #DC143C;color: white" @onclick="ResetarFormulario">Limpar</button>
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>

@code {
    private List<Concurso> concursos;
    private int concursoSelecionadoId;
    private List<Inscricao> candidatos;
    private List<ConcursoDisciplina> disciplinas;
    private Dictionary<int, decimal?> notas = new Dictionary<int, decimal?>();
    private Pontuacao notasCandidatos = new Pontuacao();
    private int candidatoSelecionadoId;
    private string mensagemErro;
    private string mensagemSucesso;

    protected override async Task OnInitializedAsync()
    {
        concursos = await concursoControl.ListarConcurso();
    }

    private async Task OnConcursoSelecionado(ChangeEventArgs e)
    {
        concursoSelecionadoId = int.Parse(e.Value.ToString());
        Console.WriteLine($"Concurso selecionado ID: {concursoSelecionadoId}");
        await CarregarCandidatos();
    }

    private async Task CarregarCandidatos()
    {
        candidatos = await inscricaoControl.ListarInscricaoPorConcurso(concursoSelecionadoId);
        Console.WriteLine($"Candidatos carregados: {candidatos?.Count}");
        disciplinas = null;
    }

    private async Task CarregarDisciplinas(int candidatoId)
    {
        candidatoSelecionadoId = candidatoId;
        Console.WriteLine($"Candidato selecionado ID: {candidatoSelecionadoId}");
        var inscricao = candidatos.FirstOrDefault(c => c.Id == candidatoSelecionadoId);
        if (inscricao == null)
        {
            Console.WriteLine("Inscrição não encontrada");
            mensagemErro = "Inscrição não encontrada.";
            EsconderMensagens();
            return;
        }
        Console.WriteLine($"ConcursoId para disciplinas: {inscricao?.ConcursoId}");
        disciplinas = await concursoDisciplinaControl.ListarConcursoDisciplinasPorConcurso(inscricao.ConcursoId);

        notas.Clear();
        foreach (var disciplina in disciplinas)
        {
            var pontuacaoExistente = await pontuacaoControl.ObterPontuacaoPorInscricaoEConcursoDisciplina(inscricao.Id, disciplina.Id);
            notas[disciplina.Id] = pontuacaoExistente?.Nota;
            if (!notas.ContainsKey(disciplina.Id))
            {
                notas.Add(disciplina.Id, 0);
            }
        }
        StateHasChanged();
    }

    private async Task SalvarNotas()
    {
        var inscricao = candidatos.FirstOrDefault(c => c.Id == candidatoSelecionadoId);

        if (inscricao == null || disciplinas == null || !disciplinas.Any())
        {
            mensagemErro = "Não há notas para salvar.";
            EsconderMensagens();
            return;
        }

        foreach (var disciplina in disciplinas)
        {
            var pontuacaoExistente = await pontuacaoControl.ObterPontuacaoPorInscricaoEConcursoDisciplina(inscricao.Id, disciplina.Id);
            if (pontuacaoExistente != null)
            {
                pontuacaoExistente.Nota = notas[disciplina.Id];
                await pontuacaoControl.Atualizar(pontuacaoExistente.Id, pontuacaoExistente);
            }
            else
            {
                var novaPontuacao = new Pontuacao
                    {
                        InscricaoId = inscricao.Id,
                        ConcursoDisciplinaId = disciplina.Id,
                        Nota = notas[disciplina.Id]
                    };
                await pontuacaoControl.Add(novaPontuacao);
            }
        }

        mensagemSucesso = "Notas salvas com sucesso!";
        EsconderMensagens(true);
    }

    private void ResetarFormulario()
    {
        disciplinas = null;
        candidatos = null;
        notas.Clear();
       
        StateHasChanged();
    }

    private async void EsconderMensagens(bool limparCampos = false)
    {
        await Task.Delay(3000);
        mensagemErro = string.Empty;
        mensagemSucesso = string.Empty;
        if (limparCampos)
        {
            ResetarFormulario();
        }
        StateHasChanged();
    }
}