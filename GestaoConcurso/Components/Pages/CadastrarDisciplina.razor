@page "/cadastroDisciplina"
@using GestaoConcurso.Models
@using GestaoConcurso.Controllers
@inject DisciplinaController disciplinaControl
@inject ConcursoController concursoControl
@inject ConcursoDisciplinaController ConcursoDisciplinaControl
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<h3 class="text-center" style="color: black; font-weight: bold;">Cadastrar Disciplinas</h3>

<div class="d-flex justify-content-center">
    <div style="width: 70%;">
        <EditForm Model="@novaDisciplina" OnValidSubmit="AdicionarDisciplina" class="p-4 border rounded shadow-lg bg-light">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label>Concurso:</label>
                <select class="form-control" @bind="concursoId">
                    <option value="">Selecione um Edital</option>
                    @if (concursos != null)
                    {
                        @foreach (var concurso in concursos)
                        {
                            <option value="@concurso.Id">@concurso.Edital</option>
                        }
                    }
                </select>
            </div>
            <div class="form-group">
                <label>Disciplina:</label>
                <InputText @bind-Value="novaDisciplina.NomeDisc" class="form-control" />
                <ValidationMessage For="@(() => novaDisciplina.NomeDisc)" />
            </div>
            <button type="submit" class="btn custom-button mt-2" style="background-color: #3CB371;color: white;">
                Adicionar Disciplina
            </button>
            @if (!string.IsNullOrEmpty(mensagemErro))
            {
                <div class="alert alert-danger text-center">@mensagemErro</div>
            }

            @if (!string.IsNullOrEmpty(mensagemSucesso))
            {
                <div class="alert alert-success text-center">@mensagemSucesso</div>
            }
            @if (disciplinasAdicionadas.Any())
            {
                <h4>Disciplinas Adicionadas:</h4>
                <ul>
                    @foreach (var disciplina in disciplinasAdicionadas)
                    {
                        <li>@disciplina.NomeDisc</li>
                    }
                </ul>
                <button class="btn custom-button" @onclick="SalvarDisciplinas" style="background-color:#FF6347;color: white;">Salvar Disciplinas</button>

              
            }
            
        </EditForm>
    </div>
</div>

@code {
    private int concursoId;
    private Disciplina novaDisciplina = new Disciplina();
    private List<Disciplina> disciplinasAdicionadas = new List<Disciplina>();
    private List<Concurso> concursos;
    private string mensagemErro;
    private string mensagemSucesso;

    protected override async Task OnInitializedAsync()
    {
        concursos = await concursoControl.ListarConcurso();
    }

    private void AdicionarDisciplina()
    {
        if (!string.IsNullOrWhiteSpace(novaDisciplina.NomeDisc))
        {
            disciplinasAdicionadas.Add(new Disciplina { NomeDisc = novaDisciplina.NomeDisc });
            novaDisciplina = new Disciplina(); 
        }
    }
    //

    private async Task SalvarDisciplinas()
    {
        if (concursoId > 0 && disciplinasAdicionadas.Any())
        {
            List<string> disciplinasDuplicadas = new List<string>(); // Lista para armazenar disciplinas duplicadas
            List<Disciplina> disciplinasParaAdicionar = new List<Disciplina>(); // Lista para armazenar disciplinas que serão adicionadas

            foreach (var disciplina in disciplinasAdicionadas)
            {
                try
                {
                    await disciplinaControl.Add(disciplina);
                    await disciplinaControl.Salvar();

                    await ConcursoDisciplinaControl.Add(new ConcursoDisciplina
                        {
                            ConcursoId = concursoId,
                            DisciplinaId = disciplina.Id,
                            DataRegistro = DateTime.Now
                        });
                    await ConcursoDisciplinaControl.Salvar();

                    disciplinasParaAdicionar.Add(disciplina); // Adiciona a disciplina à lista de disciplinas para adicionar
                }
                catch (Exception ex)
                {
                    if (ex.Message == "Disciplina com este nome já cadastrada para este concurso.")
                    {
                        disciplinasDuplicadas.Add(disciplina.NomeDisc); // Adiciona o nome da disciplina duplicada à lista
                    }
                    else
                    {
                        mensagemErro = $"Erro ao salvar: {ex.Message}";
                        EsconderMensagens();
                        return; // Interrompe o loop se houver um erro
                    }
                }
            }

            if (disciplinasDuplicadas.Any())
            {
                mensagemErro = $"As seguintes disciplinas já estão cadastradas para este concurso: {string.Join(", ", disciplinasDuplicadas)}.";
                EsconderMensagens();

                // Remove as disciplinas duplicadas da lista disciplinasAdicionadas
                disciplinasAdicionadas = disciplinasAdicionadas.Where(d => !disciplinasDuplicadas.Contains(d.NomeDisc)).ToList();
            }
            else
            {
                mensagemSucesso = "Cadastro realizado com sucesso!";
                EsconderMensagens(true);
                disciplinasAdicionadas = disciplinasParaAdicionar;
            }
        }
        else
        {
            mensagemErro = "Erro ao salvar o candidato.";
            EsconderMensagens();
        }
    }

    //
    private void ResetarFormulario()
    {
        concursoId = 0; 
        novaDisciplina = new Disciplina(); 
        disciplinasAdicionadas.Clear(); 
    }

    private async void EsconderMensagens(bool limparCampos = false)
    {
        await Task.Delay(10000);
        mensagemErro = string.Empty;
        mensagemSucesso = string.Empty;
        if (limparCampos)
        {
            ResetarFormulario();
        }
        StateHasChanged();
    }
}